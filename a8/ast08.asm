;  CS 218 - Assignment 8
;  Provided Main.

;  DO NOT EDIT THIS FILE

; **************************************************************************
;  Provided main -> call assembly language functions:

;  * Void function, bubbleSort(), sorts the numbers into descending
;    order (large to small).  Uses the bubble sort algorithm from
;    assignment #7 (modified to sort in descending order).

;  * Void function, cubeAreas(), to calculate the area of each cube
;    in a series of cube sides.

;  * Void function, cubeStats(), that given an array of integer
;    cube areas, finds the minimum, maximum, sum, integer average,
;    sum of numbers evenly divisible by 3.

;  * Integer function, iMedian(), to compute and return the integer
;    median for a list of numbers. Note, for an odd number of items,
;    the median value is defined as the middle value.  For an even
;    number of values, it is the integer average of the two middle
;    values. A 32-bit integer function returns the result in eax.

;  * Integer function, eStatistic(), to compute the e-statistic for
;    a list of numbers.

;  Note, all data is signed!

; **************************************************************************
;  Data section for initialized data delcarations.

section	.data

; -----
;  Define standard constants

TRUE		equ	1
FALSE		equ	0

EXIT_SUCCESS	equ	0			; Successful operation

STDIN		equ	0			; standard input
STDOUT		equ	1			; standard output
STDERR		equ	2			; standard error

SYS_read	equ	0			; system call code for read
SYS_write	equ	1			; system call code for write
SYS_open	equ	2			; system call code for file open
SYS_close	equ	3			; system call code for file close
SYS_fork	equ	57			; system call code for fork
SYS_exit	equ	60			; system call code for terminate
SYS_creat	equ	85			; system call code for file open/create
SYS_time	equ	201			; system call code for get time

LF		equ	10
NULL		equ	0
ESC		equ	27

; -----
;  Data Sets for Assignment #8.

cSides1		dd	 21,  27,  10,  22,  31
		dd	 13,  12,  17,  19,  20
		dd	 24,  11,  14,  30,  33
		dd	 27,  34,  23,  37,  40
		dd	 38,  18,  15,  25,  16
		dd	 26,  39,  36,  13
len1		dd	29
min1		dd	0
med1		dd	0
max1		dd	0
sum1		dd	0
ave1		dd	0
threeSum1	dd	0
eStat1		dq	0

cSides2		dd	127, 135, 117, 115, 161
		dd	110, 120, 122, 124, 126
		dd	129, 113, 155, 135, 137
		dd	119, 141, 143, 145, 149
		dd	153, 119, 123, 117, 159
		dd	116, 115, 151, 167, 169
		dd	128, 130, 132, 133, 111
		dd	138, 140, 142, 144, 146
		dd	121, 125, 151, 113, 119
		dd	257, 199, 153, 165, 179
		dd	127, 155, 117, 115, 161
		dd	183, 114, 121, 128, 112
		dd	126, 117, 127, 127, 184
		dd	174, 112, 125, 126, 129
		dd	188, 115, 111, 118, 115
		dd	126, 117, 115, 110, 114
		dd	124, 143, 134, 112, 113
		dd	172, 176, 156, 165, 156
		dd	153, 140, 191, 168, 162
		dd	146, 147, 167, 177, 144
len2		dd	100
min2		dd	0
med2		dd	0
max2		dd	0
sum2		dd	0
ave2		dd	0
threeSum2	dd	0
eStat2		dq	0

cSides3		dd	244, 234, 313, 121, 216
		dd	141, 321, 324, 213, 223
		dd	318, 333, 112, 210, 110
		dd	124, 243, 524, 112, 323
		dd	153, 440, 111, 218, 212
		dd	447, 427, 114, 317, 919
		dd	183, 450, 651, 428, 515
		dd	183, 414, 311, 218, 212
		dd	426, 917, 217, 217, 414
		dd	174, 912, 115, 116, 229
		dd	318, 335, 351, 118, 515
		dd	126, 317, 315, 110, 414
		dd	124, 113, 514, 212, 313
		dd	272, 326, 416, 515, 616
		dd	153, 910, 451, 818, 212
		dd	146, 317, 317, 117, 211
		dd	255, 452, 615, 219, 111
		dd	464, 552, 715, 312, 253
		dd	483, 515, 911, 418, 137
		dd	966, 717, 987, 617, 435
		dd	610, 320, 332, 524, 659
		dd	319, 232, 195, 335, 373
		dd	339, 341, 343, 345, 494
		dd	353, 439, 313, 100, 953
		dd	416, 415, 551, 667, 912
		dd	628, 430, 132, 133, 100
		dd	938, 240, 342, 444, 161
		dd	121, 425, 251, 313, 191
		dd	257, 999, 153, 665, 191
		dd	118, 455, 417, 515, 211
		dd	283, 234, 611, 828, 221
		dd	826, 317, 827, 127, 200
		dd	168, 115, 611, 218, 150
		dd	436, 317, 515, 411, 148
		dd	314, 243, 334, 312, 281
		dd	432, 276, 156, 665, 147
		dd	353, 140, 231, 868, 265
		dd	896, 547, 367, 777, 246
		dd	455, 332, 385, 449, 146
		dd	264, 472, 175, 162, 121
len3		dd	200
min3		dd	0
med3		dd	0
max3		dd	0
sum3		dd	0
ave3		dd	0
threeSum3	dd	0
eStat3		dq	0

; **********************************************************************************
;  Data section for un-initialized data delcarations.
;	The 'resd <imm>' reserves '<imm>' number of
;	un-initialized double-words.

section	.bss

cAreas1		resd	29
cAreas2		resd	100
cAreas3		resd	200

; **********************************************************************************

extern	cubeAreas, bubbleSort, cubeStats
extern	iMedian, eStatistic

section	.text
global	main
main:

; **************************************************
;  Call functions for data set 1.

;  HLL Call:
;   cubeAreas(cSides, len, cAreas);

	mov	rdi, cSides1
	mov	esi, dword [len1]
	mov	rdx, cAreas1
	call	cubeAreas

;  HLL Call:
;   bubbleSort(cAreas, len);

	mov	rdi, cAreas1
	mov	esi, dword [len1]
	call	bubbleSort

;  HLL Call:
;   cubeStats(cAreas, len, min, max, sum, ave, threeSum);

	mov	rdi, cAreas1
	mov	esi, dword [len1]
	mov	rdx, min1
	mov	rcx, max1
	mov	r8, sum1
	mov	r9, ave1
	mov	rax, threeSum1
	push	rax
	call	cubeStats
	add	rsp, 8

;  HLL Call:
;   med = iMedian(cAreas, len);

	mov	rdi, cAreas1
	mov	esi, dword [len1]
	call	iMedian

	mov	dword [med1], eax

;  HLL Call:
;   mStat = eStatistic(cAreas, len);

	mov	rdi, cAreas1
	mov	esi, dword [len1]
	call	eStatistic

	mov	qword [eStat1], rax

; **************************************************
;  Call functions for data set 2.

;  HLL Call:
;   cubeAreas(cSides, len, cAreas);

	mov	rdi, cSides2
	mov	esi, dword [len2]
	mov	rdx, cAreas2
	call	cubeAreas

;  HLL Call:
;   bubbleSort(cAreas, len);

	mov	rdi, cAreas2
	mov	esi, dword [len2]
	call	bubbleSort

;  HLL Call:
;   cubeStats(cAreas, len, min, max, sum, ave, threeSum);

	mov	rdi, cAreas2
	mov	esi, dword [len2]
	mov	rdx, min2
	mov	rcx, max2
	mov	r8, sum2
	mov	r9, ave2
	mov	rax, threeSum2
	push	rax
	call	cubeStats
	add	rsp, 8

;  HLL Call:
;   med = iMedian(cAreas, len);

	mov	rdi, cAreas2
	mov	esi, dword [len2]
	call	iMedian

	mov	dword [med2], eax

;  HLL Call:
;   mStat = mStatistic(cAreas, len);

	mov	rdi, cAreas2
	mov	esi, dword [len2]
	call	eStatistic

	mov	qword [eStat2], rax

; **************************************************
;  Call functions for data set 3.

;  HLL Call:
;   cubeAreas(cSides, len, cAreas);

	mov	rdi, cSides3
	mov	esi, dword [len3]
	mov	rdx, cAreas3
	call	cubeAreas

; HLL Call:
;  bubbleSort(cAreas, len);

	mov	rdi, cAreas3
	mov	esi, dword [len3]
	call	bubbleSort

;  HLL Call:
;   cubeStats(cAreas, len, min, max, sum, ave, threeSum);

	mov	rdi, cAreas3
	mov	esi, dword [len3]
	mov	rdx, min3
	mov	rcx, max3
	mov	r8, sum3
	mov	r9, ave3
	mov	rax, threeSum3
	push	rax
	call	cubeStats
	add	rsp, 8

;  HLL Call:
;   med = iMedian(cAreas, len);

	mov	rdi, cAreas3
	mov	esi, dword [len3]
	call	iMedian

	mov	dword [med3], eax

;  HLL Call:
;   eStat = mStatistic(cAreas, len);

	mov	rdi, cAreas3
	mov	esi, dword [len3]
	call	eStatistic

	mov	qword [eStat3], rax

; **************************************************
;  Done, terminate program.

last:
	mov	rax, SYS_exit			; call code for exit (sys_exit)
	mov	rdi, EXIT_SUCCESS
	syscall

